Logical gates in actin monomer
We evaluate information processing capacity of a single actin molecule by calculating distributions of logical gates implemented by the molecule via propagating patterns of excitation. We represent a filamentous actin molecule as an excitable automaton network (F-actin automaton). where every atom updates its state depending on states of atoms its connected to with chemical bonds (hard neighbours) and atoms being in physical proximity to the atom (soft neighbours). A resting atom excites if a sum of its excited hard neighbours and a weighted sum of its soft neighbours belong to some specified interval. We demonstrate that F-actin automata implement OR, AND, XOR and AND-NOT gates via interacting patterns of excitation. Gate AND is the most common gate and gate XOR is the rarest. Using the architectures of gates discovered we implement one bit half-adder and controlled-not circuits in the F-actin automata. Speed and space values of the F-actin molecular computers are discussed.
Actin is a protein presented in all eukaryotic cells in forms of globular actin (G-actin) and filamentous actin (F-actin)1,2,3. G-actin, polymerises in double helix of filamentous actin, during polymerisation G-actin units slightly change their shapes and thus become F-actin units4. The actin networks play a key role in information processing5,6,7,8 in living cells. In ref.9 we proposed a model of actin polymer filaments as two chains of one-dimensional binary-state semi-totalistic automaton arrays and uncovered rules supporting traveling localisations, discrete analogs of ionic waves proposed in actin filaments10. We speculated that a computation in actin filaments could be implemented with travelling patterns of excitation. We implemented computing schemes in several families of actin filament models, from quantum automata to lattice with Morse potential11,12,13,14,15. The models proposed previously dealt with a coarse-grain computation on actin filaments, chains of F-actin units, where each monomer stored a single bit. A density of computing elements in actin-based computers could be substantially increased if we implement several logical gates in a single F-actin monomer. Thus, to evaluate information processing capacity of an actin molecule we decided to calculate distributions of logical gates implemented by the molecule via propagating patterns of excitation. The approach was successfully tested on automaton model of verotoxin protein16 and scoping experiments have been conducted on actin molecular17.
The paper is structured as follows. In Sect. 2 we design an actin molecule model in automaton network where nodes takes excited, refractory and resting states and update their states depending on states of their neighbours. The logical gates, Sect. 4, are discovered by selecting a pair of inputs node at random, exciting them with all possible combinations of binary inputs, recording states of all other nodes in the molecular automaton and selecting combinations of input and output bodes that implement desired logical functions. The gates are cascaded in a one-bit half-adder, Sect. 5, and controlled-not gate, Sect. 6. In Sect. 7 we estimate densities of logical gates in actin and speed of computation.
There are nearly 9 · 106 pairs of inputs in an F-actin molecule. We sampled 5 · 104 pairs of nodes and discovered that several species of logical gates can be realised by interacting patterns of excitation in F-actin. We considered two classes of excitation rules: threshold excitation and interval excitation. Threshold excitation automata realise only input selectors, OR and AND-NOT gates, thus posing a limited interest for future computing applications. In the rest of the paper we focused on interval excitation automata. Input selector gates, where output takes a value of one of the inputs, are most common. They found almost in half of the samples. The next most frequently found gate is AND. It is frequency is around 0.02. The rarest gate is XOR, frequency 0.001. Frequencies of AND-NOT gates are 0.003–0.004.
A range of excitation intervals Θ depends on a number of hard and soft neighbours. Number of hard neighbours is limited to 2–3 in average, number of soft neighbours depends on parameter ρ (Fig. 4). We studied automata with excitation intervals Θ = \([1]\) and Θ = \([1,\,2]\), other configurations of the excitation interval can be analysed in future, e.g. Θ = \([2,\,3]\) or Θ = \([1,\,3,\,4]\), etc., we do not expect thought that a distribution of logical gates discovered will be substantially affected by exact configuration of excitation interval. Soft neighbourhood of some nodes might be changed dynamically when conformation changes of the molecule are induced. Thus, in principle, we can tune configurations of logical circuits by controlling shape of the F-acting unit; this could be a topic of further studies.
How fast would be an F-actin computing unit if implemented in experimental laboratory conditions? An excitation in a molecule takes place when an electron in a ground state (analog of automaton resting state \(\circ \)) absorbs a photon and moves up to high yet unstable energy level (analog of automaton excited state \(\star \)). Later the electron returns to its ground state (transition period to the ground state is analogous to automaton refractory state \(\bullet \)). When returning to the ground state the electron releases photon which travels with speed 3 × 1018 Å per second. Assuming at each step of modelling excitation wave-front travels ρ = 3 Å, one step of automaton evolution equates to 10−18 sec, i.e. one attosecond, of real time. The half-adder produces results in at most 30 steps of automaton evolution (Fig. 11), i.e. in 30 attoseconds. That is upper boundary of operating frequency of actin-based computing devices will be 30 PetaHz. The outputs of the F-actin unit can be measured using controlled light waves and pulse trains20,21,22,23, or in case of using less exotic devices, train of 103 impulses of the same data inputs can be sent to F-actin unit and output recorded via accumulating, e.g. capacitive, devices.
What if we were unable to excite a single node in F-actin unit? Then we could use larger probes. Will these affect frequency distribution of gates realisable in F-actin units? To find out we conducted 5 · 104 trials, in each trial we selected a pair of nodes and, for inputs ‘1’, stimulated all nodes in a sphere radius 10 Å around the input node. Output nodes usually form clusters exceeding 10 Å, so we should care about probes only in inputs. Frequencies of logical gates found are shown in Table 3. By comparing Table 3 with frequencies of gates realisable during single node stimulation (Table 2d) we find that probe based inputting increases a number of gates discovered: AND-NOT gate by c. 18 times, OR gate by c. 7 times, XOR gate by c. 5 times.
To evaluate density of gates we assume there are at most c. 8 · 106 pairs of nodes in a F-actin molecule. Gate XOR has the lowest frequency 0.001 (Table 2d). Based on the frequency of XOR gate we assume there are at least 6 · 103 XOR gates in a single F-actin molecule. Maximum diameter of an actin filament is 8 nm24,25. An actin filament is composed of overlapping units of F-actin. Thus, diameter of a single unit is c. 4 nm. There are estimated 6 K gates per 4 nm, or in terms of conventional circuits, when projected onto a 2 × 2 nm square, we have c. 16 · 1618 gates per sq inch.
Let us estimate temporal resources on the binary arithmetical computation realisable by F-actin molecular computer. In random samples of 5 · 104 pairs of inputs nodes we found one one-bit half-adder. Taking lower boundary of pairs available as 8 · 106, there are c. 160 one-bit half-adders in F-actin molecule, with possibility of constructing 80 one-bit full adders. Thus we can assume that at least 64-bit full adder can be constructed in a single F-actin unit. A 64-bit addition will take c. 1920 attoseconds, i.e. c. 2 femtoseconds.
Is a frequency distribution of logical gates a protein specific? Can such a distribution play a role of a fingerprint? Extensive analysis will be done in future. Right know we have data on just two protein molecules: actin (present paper) and verotoxin16. Let us do some comparisons. Actin automata governed by rule Eq. (1) with θ = 0 and μ = 0.2 implement 1.05 times more AND-NOT gates than verotoxin automata for the same rule and set of parameters. However, AND-NOT gates implemented in actin have 1.3 less average number of potential output nodes than that in verotoxin. When actin and verotoxin automata are governed by rule Eq. (2) with Θ = \([1]\) and μ = 0.2 actin implements three times more OR gates, the same number of and hates, five times more XOR gates and twice more AND-NOT gates than verotoxin does. With regards to average number of potential output nodes per input pair, actin has the same number for OR gate, c. 1.6 times less for XOR gate then verotoxin. Thus, actin molecule potentially implements more logical gates than verotoxin molecule however number of potential output nodes is less in actin.
We use a structure of F-actin molecule produced using X-ray fibre diffraction intensities obtained from well oriented sols of rabbit skeletal muscles4. The structure was calculated with resolution 3.3 Å in radial direction and 5.6 Å along the axis, see illustration of the molecular structure in Fig. 1. The molecular structure is converted to a non-directed graph \({\mathscr{A}}\) embedded in Euclidean space: where every node represents an atom and an edge corresponds to a bond between the atoms. F-actin is represented by a graph \({\mathscr{A}}=\langle {\bf{V}},{\bf{E}},{\bf{C}}\rangle \), where V is a set of nodes, E is a set of edges, C is a set of Euclidean coordinates of nodes form V.
F-actin molecule, CPK colouring, the strucutre of the molecule is determined in ref.4.
The graph \({\mathscr{A}}\) has 2961 nodes, 3025 edges. Minimum degree is 1, maximum is 4, average is 2.044 (with standard deviation 0.8) and median degree 2. There are 883 nodes with degree 1, 1009 nodes with degree 2, 1066 nodes with degree 3 and two nodes with degree 4. The graph \({\mathscr{A}}\) has a diameter (longest shortest path) 1130 nodes, and a mean distance (mean shortest path between any two nodes) 376, and a median distance 338.
Let u(s) be nodes of \({\mathscr{A}}\) that connected with an edge with a node s, they correspond to atoms connected with a bond to atom s. We call them hard-neighbours because their neighbourhood is determined by chemical structure of F-actin. Actin molecule is folded in 3D. Let δ be an average distance between two hard-neighbours, for F-actin δ = 1.43 units. Let w(s) be nodes of \({\mathscr{A}}\) that are at distance not exceed ρ, in Euclidean space, from node s. We call them soft neighbours because their neighbourhood is determined by 3D structure of F-actin. Thus each node s has two neighbourhoods:
hard neighbourhood u(s) = {p ∈ V : (sp) ∈ E} (actin automata with hard neighbourhood were firstly proposed by us in ref.17), and
soft neighbourhood \(w(s)=\{p\in {\bf{V}}\,:\,p\notin u(s)\,{\rm{and}}\,d({c}_{s},\,{c}_{p})\le \rho \}\), where d(c

s
, c

p
) is a distance between nodes s and p in 3D Euclidean space and c

s
, c

p
 ∈ C.
Distribution of hard neighbourhood sizes corresponds to distribution of degrees of the nodes. Distribution of soft neighbourhood sizes is determined by distance ρ (Fig. 4). We have chosen ρ = 3 so size of w(s) does not substantially exceeds size of u(s) (Fig. 3a). Examples of neighbourhoods are shown in Fig. 2, a soft neighbour of a node s is not necessarily a hard neighbour of the s’s neighbour. Distribution of nodes with highest numbers of soft neighbours is shown in (Fig. 3b).
Examples of neighbourhoods, central node is orange, hard neighbours u(s) are red, soft neighbours, for ρ = 3, are blue w(s).
Soft neighbourhood. (a) Distribution of soft neighbourhood sizes for ρ = 3. (b) Nodes with maximum number of soft neighbours are coloured: red (12 neighbours), blue (10 neigbours), green (9 neighbours).
Number of soft neighbours of a node versus distance ρ, averaged over all nodes.
Each node s of \({\mathscr{A}}\) takes three states: resting (\(\circ \)), excited (\(\star \)) and refractory (\(\bullet \)). A resting node s
t = \(\circ \) excites depending on a number \({\sigma }_{s}^{t}\) of its excited neighbours in neighbourhoods u(s) and w(s): \({\sigma }_{s}^{t}={\sum }_{p\in u(s)}\,\{{p}^{t}=\star \}\)
\(\mu \,{\sum }_{p\in w(s)}\,\{{p}^{t}=\star \}\,\)
\(+\,\mu \,{\sum }_{p\in w(s)}\,\{{p}^{t}=\star \}\). We consider values of μ = 0.2, 0.4, 0.8 and \(\mu =\frac{\delta }{d({c}_{s},\,{c}_{p})}\). An excited node takes refractory state. A refractory node takes resting state. We consider two types of excitation. In threshold excitation a resting node s excites if a \({\sigma }_{s}^{t}\) exceeds threshold θ:
In interval excitation a resting node s excites if \({\sigma }_{s}^{t}\) belongs to a discrete interval Θ = [θ
1, θ
2], i.e. a set of discrete numbers from θ
1 to θ
2:
We search for the Boolean logical gates by selecting a pair of nodes from V, exciting these nodes with combinations of inputs 01, 10, 11 (where ‘0’ is a logical False and ‘1’ is logical True) and checking states of all other nodes.
Let two nodes i and j be selected as inputs and one node p as an output. Boolean logical variables are x and y (inputs) and z (output). Initially automaton \({\mathscr{A}}\) is in its resting state. Logical values of inputs are converted to initial states of input nodes as follows. If x = 1 then \({s}_{i}^{0}=\star \), if y = 1 then \({s}_{j}^{0}=\star \).
We allow the automaton to evolve till a limit cycle or a globally resting state are reached. During the automaton’s evolution we monitor state of the output node p. If at some time step t we have \({s}_{p}^{t}=\star \) we assign z = 1. For every rule of excitation, and exact parameters, we performed random trials, by selecting 5 · 104 pairs of nodes at random, exciting them with strings \((\circ \star )\), \((\star \circ )\), \((\star \star )\), and recording outputs at all other nodes of \({\mathscr{A}}\).
For modelling and analyses we used Processing, R, and iGraph. Patterns of excitation dynamics are visualised in Chimera.
